---
description: 
globs: 
alwaysApply: false
---
# Git Workflow Guidelines

## Commit Messages
- Use concise and descriptive messages
- Follow conventional commits format
- Start with type: feat, fix, docs, style, refactor, test, chore

## Examples
```
feat: add user authentication
fix: resolve mobile navigation issue
style: update button component styling
refactor: optimize data fetching logic
```

## Branch Naming
- Feature branches: `feature/feature-name`
- Bug fixes: `fix/bug-description`
- Hotfixes: `hotfix/issue-description`
- Releases: `release/version-number`

## Best Practices
- Keep commits atomic and focused
- Write meaningful commit messages
- Reference issue numbers when applicable
- Review changes before committing
- Keep branches up to date with main

## Git Ignore
Essential patterns to include in `.gitignore`:
```
# Dependencies
node_modules
.pnpm-store

# Next.js
.next
out

# Environment
.env
.env.local
.env.*.local

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# IDE
.vscode
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# OS
.DS_Store
Thumbs.db

